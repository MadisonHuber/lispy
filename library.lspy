;;;
;;; Lispy Standard Prelude
;;;

;;; Atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)

; Function Definitions
(def {fun} (\ {f b} {
    def (head f) (\ (tail f) b)
}))

; Open new scope
(fun {let b} {
    ((\ {_} b) ())
})

; Unpack List for Function
(fun {unpack f l} {
    eval (join (list f) l)
})

; Pack List for Function
(fun {pack f & xs} {f xs})

; Curried and Uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

; Perform Several things in Sequence
(fun {do & l} {
    if (== l nil)
    {nil}
    {last l}
})



; Logical Operators
(fun {not x} {- 1 x})
(fun {or x y} {+ x y})
(fun {and x y} {* x y})

; Miscellaneous Functions

; flip applies f to arguments a and b in the reversed order
(fun {flip f a b} {f b a})

; ghost evaluates a list of arguments
(fun {ghost & xs} {eval xs})

; comp composes functions--applies g to x then applies f to that result
(fun {comp f g x} {f (g x)}) 

; Functions to extract first, second, or third element from a list
(fun {fst l} { eval (head l) })
(fun {snd l} { eval (head (tail l)) })
(fun {trd l} { eval (head (tail (tail l))) })

; length of list
(fun {len l} {
    if (== l nil)
        {0}
        {+ 1 (len (tail l))}
})

; nth item in a list
(fun {nth n l} {
    if (== n 0)
        {fst l}
        {nth (- n l) (tail l)}
})

; last item in list
(fun {last l} {nth (- (len l) 1) l})

; take n elements
(fun {take n l} {
    if (== n 0)
        {nil}
        {join (head l) (take (- n l) (tail l))}
})

; drop n elements
(fun {drop n l} {
    if (== n 0)
        {l}
        {drop (- n l) (tail l)}
})

; split at n
(fun {split n l} {list (take n l) (drop n l)})

; element of a list
(fun {elem x l} {
    if (== l nil)
    {false}
    {if (== x (fst l)) {true} {elem x (tail l)}}
})

; Apply Function to List
(fun {map f l} {
    if (== l nil)
        {nil}
        {join (list (f (fst l))) (map f (tail l))}
})

; Apply Filter to a list
(fun {filter f l} {
    if (== l nil)
        {nil}
        {join (if (f (fst l)) {head l} {nil}) (filter f (tail l))}
})

; Fold left
(fun {foldl f z l} {
    if (== l nil)
        {z}
        {foldl f (f z (fst l)) (tail l)}
})

; sum
(fun {sum l} {foldl + 0 l})

; product
(fun {product l} {foldl * 1 l})

; Conditional Functions

; building switch-case

(fun {select & cs} {
    if (== cs nil)
    {error "No Selection Found"}
    {if (fst (fst cs)) {snd (fst cs)} {unpack select (tail cs)}}
})

; default case 'otherwise' that always evaluates to true
(def {otherwise} true)

 (fun {case x & cs} {
    if (== cs nil)
        {error "No Case Found"}
        {if (== x (fst (fst cs))) {snd (fst cs)} {
            unpack case (join (list x) (tail cs))
        }}
})

; fibonacci
(fun {fib n} {
    select
        {( == n 0) 0}
        {(== n 1) 1}
        { otherwise (+ (fib (- n 1)) (fib (- n 2)))}
})

; function to give all of list but last element
(fun {init l} {
    if (== (tail l) nil)
        {nil}
        {join (head l) (init (tail l))}
})

; reverse list
(fun {reverse l} {
    if (== l nil)
        {nil}
        {join (reverse (tail l)) (head l)}
})